{"remainingRequest":"/Volumes/WORKSPACE/Development/Dennis/current/Aham/topic_tree/tree/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/WORKSPACE/Development/Dennis/current/Aham/topic_tree/tree/src/components/tree.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Volumes/WORKSPACE/Development/Dennis/current/Aham/topic_tree/tree/src/components/tree.vue","mtime":1543476269000},{"path":"/Volumes/WORKSPACE/Development/Dennis/current/Aham/topic_tree/tree/node_modules/css-loader/index.js","mtime":1542757791000},{"path":"/Volumes/WORKSPACE/Development/Dennis/current/Aham/topic_tree/tree/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1542757792000},{"path":"/Volumes/WORKSPACE/Development/Dennis/current/Aham/topic_tree/tree/node_modules/postcss-loader/src/index.js","mtime":1542757791000},{"path":"/Volumes/WORKSPACE/Development/Dennis/current/Aham/topic_tree/tree/node_modules/cache-loader/dist/cjs.js","mtime":1542757790000},{"path":"/Volumes/WORKSPACE/Development/Dennis/current/Aham/topic_tree/tree/node_modules/vue-loader/lib/index.js","mtime":1542757792000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.node {\n  cursor: pointer;\n}\n.node circle {\n  fill: rgb(0, 171, 164);\n  fill-opacity: 0.7;\n}\n.node text {\n  font: 12px sans-serif;\n}\n.link {\n  fill: none;\n}\n",{"version":3,"sources":["tree.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"tree.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div id=\"topic-tree\">\n    <h1></h1>\n  </div>\n</template>\n\n<script>\nimport * as d3 from 'd3'\n\nexport default {\n  name: 'tree',\n  props: {\n    msg: String\n  },\n  data: () => ({\n    treeData : [{\n      \"name\": \"Science\",\n      \"parent\": \"null\",\n      \"children\": [\n        {\n          \"name\": \"Physics\",\n          \"parent\": \"Science\",\n          \"children\": [\n            {\n              \"name\": \"Linear motion\",\n              \"parent\": \"Physics\"\n            },\n            {\n              \"name\": \"Lense\",\n              \"parent\": \"Physics\"\n            }\n          ]\n        },\n        {\n          \"name\": \"Biology\",\n          \"parent\": \"Science\",\n          \"children\": [\n            {\n              \"name\": \"sub-category\",\n              \"parent\": \"Biology\"\n            },\n            {\n              \"name\": \"sub-category\",\n              \"parent\": \"Biology\"\n            }\n          ]\n        }\n      ]\n    }]\n  }),\n  mounted () {\n    this.draw()\n  },\n  methods: {\n    draw () {\n      let margin = {top: 20, right: 120, bottom: 20, left: 120},\n          width = 960 - margin.right - margin.left,\n          height = 500 - margin.top - margin.bottom;\n          \n        // let i = 0,\n          // duration = 750,\n        let root;\n\n        let tree = d3.layout.tree()\n          .size([height, width]);\n\n        let diagonal = d3.svg.diagonal()\n          .projection(function(d) { return [d.y, d.x]; });\n\n        let svg = d3.select(\"#topic-tree\").append(\"svg\")\n          .attr(\"width\", width + margin.right + margin.left)\n          .attr(\"height\", height + margin.top + margin.bottom)\n          .append(\"g\")\n          .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n        root = this.treeData[0];\n        root.x0 = height / 2;\n        root.y0 = 0;\n          \n        this.update(root);\n\n        d3.select(self.frameElement).style(\"height\", \"500px\");\n    },\n    update(source) {\n      const that = this;\n      // Compute the new tree layout.\n      let nodes = tree.nodes(root).reverse(),\n        links = tree.links(nodes);\n\n      // Normalize for fixed-depth.\n      nodes.forEach(function(d) { d.y = d.depth * 180; });\n\n      // Update the nodes…\n      let node = svg.selectAll(\"g.node\")\n        .data(nodes, function(d) { return d.id || (d.id = ++i); });\n\n      // Enter any new nodes at the parent's previous position.\n      let nodeEnter = node.enter().append(\"g\")\n        .attr(\"class\", \"node\")\n        .attr(\"transform\", function(d) { return \"translate(\" + source.y0 + \",\" + source.x0 + \")\"; })\n        .on(\"click\", that.click);\n\n      nodeEnter.append(\"circle\")\n        .attr(\"r\", 1e-6)\n        .style(\"fill\", function(d) { return d._children ? \"lightsteelblue\" : \"#fff\"; });\n\n      nodeEnter.append(\"text\")\n        .attr(\"x\", function(d) { return d.children || d._children ? -13 : 13; })\n        .attr(\"dy\", \".35em\")\n        .attr(\"text-anchor\", function(d) { return d.children || d._children ? \"end\" : \"start\"; })\n        .text(function(d) { return d.name; })\n        .style(\"fill-opacity\", 1e-6);\n\n      // Transition nodes to their new position.\n      let nodeUpdate = node.transition()\n        .duration(duration)\n        .attr(\"transform\", function(d) { return \"translate(\" + d.y + \",\" + d.x + \")\"; });\n\n      nodeUpdate.select(\"circle\")\n        .attr(\"r\", 10)\n        .style(\"fill\", function(d) { return d._children ? \"lightsteelblue\" : \"#fff\"; });\n\n      nodeUpdate.select(\"text\")\n        .style(\"fill-opacity\", 1);\n\n      // Transition exiting nodes to the parent's new position.\n      let nodeExit = node.exit().transition()\n        .duration(duration)\n        .attr(\"transform\", function(d) { return \"translate(\" + source.y + \",\" + source.x + \")\"; })\n        .remove();\n\n      nodeExit.select(\"circle\")\n        .attr(\"r\", 1e-6);\n\n      nodeExit.select(\"text\")\n        .style(\"fill-opacity\", 1e-6);\n\n      // Update the links…\n      let link = svg.selectAll(\"path.link\")\n        .data(links, function(d) { return d.target.id; });\n\n      // Enter any new links at the parent's previous position.\n      link.enter().insert(\"path\", \"g\")\n        .attr(\"class\", \"link\")\n        .attr(\"d\", function(d) {\n        let o = {x: source.x0, y: source.y0};\n        return diagonal({source: o, target: o});\n        });\n\n      // Transition links to their new position.\n      link.transition()\n        .duration(duration)\n        .attr(\"d\", diagonal);\n\n      // Transition exiting nodes to the parent's new position.\n      link.exit().transition()\n        .duration(duration)\n        .attr(\"d\", function(d) {\n        let o = {x: source.x, y: source.y};\n        return diagonal({source: o, target: o});\n        })\n        .remove();\n\n      // Stash the old positions for transition.\n      nodes.forEach(function(d) {\n      d.x0 = d.x;\n      d.y0 = d.y;\n      });\n    },\n\n    // Toggle children on click.\n    click(d) {\n      if (d.children) {\n      d._children = d.children;\n      d.children = null;\n      } else {\n      d.children = d._children;\n      d._children = null;\n      }\n      update(d);\n    }\n  }\n}\n</script>\n<style>\n  .node {\n    cursor: pointer;\n  }\n  .node circle {\n    fill: rgb(0, 171, 164);\n    fill-opacity: 0.7;\n  }\n  .node text {\n    font: 12px sans-serif;\n  }\n  .link {\n    fill: none;\n  }\n</style>\n\n"]}]}