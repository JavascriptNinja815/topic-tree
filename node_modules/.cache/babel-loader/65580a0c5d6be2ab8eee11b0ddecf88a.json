{"remainingRequest":"/Volumes/WORKSPACE/Development/Dennis/current/Aham/topic_tree/tree/node_modules/babel-loader/lib/index.js!/Volumes/WORKSPACE/Development/Dennis/current/Aham/topic_tree/tree/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Volumes/WORKSPACE/Development/Dennis/current/Aham/topic_tree/tree/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/WORKSPACE/Development/Dennis/current/Aham/topic_tree/tree/src/components/tree.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Volumes/WORKSPACE/Development/Dennis/current/Aham/topic_tree/tree/src/components/tree.vue","mtime":1543476269000},{"path":"/Volumes/WORKSPACE/Development/Dennis/current/Aham/topic_tree/tree/node_modules/cache-loader/dist/cjs.js","mtime":1542757790000},{"path":"/Volumes/WORKSPACE/Development/Dennis/current/Aham/topic_tree/tree/node_modules/babel-loader/lib/index.js","mtime":1542757777000},{"path":"/Volumes/WORKSPACE/Development/Dennis/current/Aham/topic_tree/tree/node_modules/cache-loader/dist/cjs.js","mtime":1542757790000},{"path":"/Volumes/WORKSPACE/Development/Dennis/current/Aham/topic_tree/tree/node_modules/vue-loader/lib/index.js","mtime":1542757792000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.promise\";\nimport \"core-js/modules/es7.promise.finally\";\n//\n//\n//\n//\n//\n//\nimport * as d3 from 'd3';\nexport default {\n  name: 'tree',\n  props: {\n    msg: String\n  },\n  data: function data() {\n    return {\n      treeData: [{\n        \"name\": \"Science\",\n        \"parent\": \"null\",\n        \"children\": [{\n          \"name\": \"Physics\",\n          \"parent\": \"Science\",\n          \"children\": [{\n            \"name\": \"Linear motion\",\n            \"parent\": \"Physics\"\n          }, {\n            \"name\": \"Lense\",\n            \"parent\": \"Physics\"\n          }]\n        }, {\n          \"name\": \"Biology\",\n          \"parent\": \"Science\",\n          \"children\": [{\n            \"name\": \"sub-category\",\n            \"parent\": \"Biology\"\n          }, {\n            \"name\": \"sub-category\",\n            \"parent\": \"Biology\"\n          }]\n        }]\n      }]\n    };\n  },\n  mounted: function mounted() {\n    this.draw();\n  },\n  methods: {\n    draw: function draw() {\n      var margin = {\n        top: 20,\n        right: 120,\n        bottom: 20,\n        left: 120\n      },\n          width = 960 - margin.right - margin.left,\n          height = 500 - margin.top - margin.bottom; // let i = 0,\n      // duration = 750,\n\n      var root;\n      var tree = d3.layout.tree().size([height, width]);\n      var diagonal = d3.svg.diagonal().projection(function (d) {\n        return [d.y, d.x];\n      });\n      var svg = d3.select(\"#topic-tree\").append(\"svg\").attr(\"width\", width + margin.right + margin.left).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n      root = this.treeData[0];\n      root.x0 = height / 2;\n      root.y0 = 0;\n      this.update(root);\n      d3.select(self.frameElement).style(\"height\", \"500px\");\n    },\n    update: function update(source) {\n      var that = this; // Compute the new tree layout.\n\n      var nodes = tree.nodes(root).reverse(),\n          links = tree.links(nodes); // Normalize for fixed-depth.\n\n      nodes.forEach(function (d) {\n        d.y = d.depth * 180;\n      }); // Update the nodes…\n\n      var node = svg.selectAll(\"g.node\").data(nodes, function (d) {\n        return d.id || (d.id = ++i);\n      }); // Enter any new nodes at the parent's previous position.\n\n      var nodeEnter = node.enter().append(\"g\").attr(\"class\", \"node\").attr(\"transform\", function (d) {\n        return \"translate(\" + source.y0 + \",\" + source.x0 + \")\";\n      }).on(\"click\", that.click);\n      nodeEnter.append(\"circle\").attr(\"r\", 1e-6).style(\"fill\", function (d) {\n        return d._children ? \"lightsteelblue\" : \"#fff\";\n      });\n      nodeEnter.append(\"text\").attr(\"x\", function (d) {\n        return d.children || d._children ? -13 : 13;\n      }).attr(\"dy\", \".35em\").attr(\"text-anchor\", function (d) {\n        return d.children || d._children ? \"end\" : \"start\";\n      }).text(function (d) {\n        return d.name;\n      }).style(\"fill-opacity\", 1e-6); // Transition nodes to their new position.\n\n      var nodeUpdate = node.transition().duration(duration).attr(\"transform\", function (d) {\n        return \"translate(\" + d.y + \",\" + d.x + \")\";\n      });\n      nodeUpdate.select(\"circle\").attr(\"r\", 10).style(\"fill\", function (d) {\n        return d._children ? \"lightsteelblue\" : \"#fff\";\n      });\n      nodeUpdate.select(\"text\").style(\"fill-opacity\", 1); // Transition exiting nodes to the parent's new position.\n\n      var nodeExit = node.exit().transition().duration(duration).attr(\"transform\", function (d) {\n        return \"translate(\" + source.y + \",\" + source.x + \")\";\n      }).remove();\n      nodeExit.select(\"circle\").attr(\"r\", 1e-6);\n      nodeExit.select(\"text\").style(\"fill-opacity\", 1e-6); // Update the links…\n\n      var link = svg.selectAll(\"path.link\").data(links, function (d) {\n        return d.target.id;\n      }); // Enter any new links at the parent's previous position.\n\n      link.enter().insert(\"path\", \"g\").attr(\"class\", \"link\").attr(\"d\", function (d) {\n        var o = {\n          x: source.x0,\n          y: source.y0\n        };\n        return diagonal({\n          source: o,\n          target: o\n        });\n      }); // Transition links to their new position.\n\n      link.transition().duration(duration).attr(\"d\", diagonal); // Transition exiting nodes to the parent's new position.\n\n      link.exit().transition().duration(duration).attr(\"d\", function (d) {\n        var o = {\n          x: source.x,\n          y: source.y\n        };\n        return diagonal({\n          source: o,\n          target: o\n        });\n      }).remove(); // Stash the old positions for transition.\n\n      nodes.forEach(function (d) {\n        d.x0 = d.x;\n        d.y0 = d.y;\n      });\n    },\n    // Toggle children on click.\n    click: function click(d) {\n      if (d.children) {\n        d._children = d.children;\n        d.children = null;\n      } else {\n        d.children = d._children;\n        d._children = null;\n      }\n\n      update(d);\n    }\n  }\n};",{"version":3,"sources":["tree.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div id=\"topic-tree\">\n    <h1></h1>\n  </div>\n</template>\n\n<script>\nimport * as d3 from 'd3'\n\nexport default {\n  name: 'tree',\n  props: {\n    msg: String\n  },\n  data: () => ({\n    treeData : [{\n      \"name\": \"Science\",\n      \"parent\": \"null\",\n      \"children\": [\n        {\n          \"name\": \"Physics\",\n          \"parent\": \"Science\",\n          \"children\": [\n            {\n              \"name\": \"Linear motion\",\n              \"parent\": \"Physics\"\n            },\n            {\n              \"name\": \"Lense\",\n              \"parent\": \"Physics\"\n            }\n          ]\n        },\n        {\n          \"name\": \"Biology\",\n          \"parent\": \"Science\",\n          \"children\": [\n            {\n              \"name\": \"sub-category\",\n              \"parent\": \"Biology\"\n            },\n            {\n              \"name\": \"sub-category\",\n              \"parent\": \"Biology\"\n            }\n          ]\n        }\n      ]\n    }]\n  }),\n  mounted () {\n    this.draw()\n  },\n  methods: {\n    draw () {\n      let margin = {top: 20, right: 120, bottom: 20, left: 120},\n          width = 960 - margin.right - margin.left,\n          height = 500 - margin.top - margin.bottom;\n          \n        // let i = 0,\n          // duration = 750,\n        let root;\n\n        let tree = d3.layout.tree()\n          .size([height, width]);\n\n        let diagonal = d3.svg.diagonal()\n          .projection(function(d) { return [d.y, d.x]; });\n\n        let svg = d3.select(\"#topic-tree\").append(\"svg\")\n          .attr(\"width\", width + margin.right + margin.left)\n          .attr(\"height\", height + margin.top + margin.bottom)\n          .append(\"g\")\n          .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n        root = this.treeData[0];\n        root.x0 = height / 2;\n        root.y0 = 0;\n          \n        this.update(root);\n\n        d3.select(self.frameElement).style(\"height\", \"500px\");\n    },\n    update(source) {\n      const that = this;\n      // Compute the new tree layout.\n      let nodes = tree.nodes(root).reverse(),\n        links = tree.links(nodes);\n\n      // Normalize for fixed-depth.\n      nodes.forEach(function(d) { d.y = d.depth * 180; });\n\n      // Update the nodes…\n      let node = svg.selectAll(\"g.node\")\n        .data(nodes, function(d) { return d.id || (d.id = ++i); });\n\n      // Enter any new nodes at the parent's previous position.\n      let nodeEnter = node.enter().append(\"g\")\n        .attr(\"class\", \"node\")\n        .attr(\"transform\", function(d) { return \"translate(\" + source.y0 + \",\" + source.x0 + \")\"; })\n        .on(\"click\", that.click);\n\n      nodeEnter.append(\"circle\")\n        .attr(\"r\", 1e-6)\n        .style(\"fill\", function(d) { return d._children ? \"lightsteelblue\" : \"#fff\"; });\n\n      nodeEnter.append(\"text\")\n        .attr(\"x\", function(d) { return d.children || d._children ? -13 : 13; })\n        .attr(\"dy\", \".35em\")\n        .attr(\"text-anchor\", function(d) { return d.children || d._children ? \"end\" : \"start\"; })\n        .text(function(d) { return d.name; })\n        .style(\"fill-opacity\", 1e-6);\n\n      // Transition nodes to their new position.\n      let nodeUpdate = node.transition()\n        .duration(duration)\n        .attr(\"transform\", function(d) { return \"translate(\" + d.y + \",\" + d.x + \")\"; });\n\n      nodeUpdate.select(\"circle\")\n        .attr(\"r\", 10)\n        .style(\"fill\", function(d) { return d._children ? \"lightsteelblue\" : \"#fff\"; });\n\n      nodeUpdate.select(\"text\")\n        .style(\"fill-opacity\", 1);\n\n      // Transition exiting nodes to the parent's new position.\n      let nodeExit = node.exit().transition()\n        .duration(duration)\n        .attr(\"transform\", function(d) { return \"translate(\" + source.y + \",\" + source.x + \")\"; })\n        .remove();\n\n      nodeExit.select(\"circle\")\n        .attr(\"r\", 1e-6);\n\n      nodeExit.select(\"text\")\n        .style(\"fill-opacity\", 1e-6);\n\n      // Update the links…\n      let link = svg.selectAll(\"path.link\")\n        .data(links, function(d) { return d.target.id; });\n\n      // Enter any new links at the parent's previous position.\n      link.enter().insert(\"path\", \"g\")\n        .attr(\"class\", \"link\")\n        .attr(\"d\", function(d) {\n        let o = {x: source.x0, y: source.y0};\n        return diagonal({source: o, target: o});\n        });\n\n      // Transition links to their new position.\n      link.transition()\n        .duration(duration)\n        .attr(\"d\", diagonal);\n\n      // Transition exiting nodes to the parent's new position.\n      link.exit().transition()\n        .duration(duration)\n        .attr(\"d\", function(d) {\n        let o = {x: source.x, y: source.y};\n        return diagonal({source: o, target: o});\n        })\n        .remove();\n\n      // Stash the old positions for transition.\n      nodes.forEach(function(d) {\n      d.x0 = d.x;\n      d.y0 = d.y;\n      });\n    },\n\n    // Toggle children on click.\n    click(d) {\n      if (d.children) {\n      d._children = d.children;\n      d.children = null;\n      } else {\n      d.children = d._children;\n      d._children = null;\n      }\n      update(d);\n    }\n  }\n}\n</script>\n<style>\n  .node {\n    cursor: pointer;\n  }\n  .node circle {\n    fill: rgb(0, 171, 164);\n    fill-opacity: 0.7;\n  }\n  .node text {\n    font: 12px sans-serif;\n  }\n  .link {\n    fill: none;\n  }\n</style>\n\n"],"sourceRoot":"src/components"}]}